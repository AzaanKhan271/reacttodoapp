{"version":3,"sources":["ToDoLists.jsx","App.js","reportWebVitals.js","index.js"],"names":["ToDoLists","props","className","class","aria-hidden","onClick","onSelect","id","text","App","useState","inputList","setInputList","items","setItems","deleteItems","oldItems","filter","arrElem","index","type","placeholder","onChange","e","target","value","map","itemval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAmBeA,EAjBG,SAACC,GAEf,OACI,mCACA,sBAAKC,UAAU,aAAf,UACA,mBAAGC,MAAM,cACRC,cAAY,OACXC,QAAS,WACJJ,EAAMK,SAASL,EAAMM,OAGpC,6BAAKN,EAAMO,aC8CIC,EAtDH,WAAO,IAAD,EAEkBC,mBAAS,IAF3B,mBAETC,EAFS,KAEEC,EAFF,OAGUF,mBAAS,IAHnB,mBAGTG,EAHS,KAGFC,EAHE,KAeVC,EAAc,SAACR,GAEfO,GAAS,SAACE,GACR,OAAOA,EAASC,QAAO,SAACC,EAAQC,GAC9B,OAAOA,IAAUZ,SAO3B,OACA,mCACE,qBAAKL,UAAU,WAAf,SACE,sBAAKA,UAAU,aAAf,UACE,uBACA,6CACC,uBACA,uBAAQkB,KAAK,OAAOC,YAAY,YAAYC,SA7BjC,SAACC,GACjBX,EAAaW,EAAEC,OAAOC,QA6BjBA,MAAOd,IACP,wBAAQN,QA5BK,WACpBS,GAAS,SAACE,GACR,MAAM,GAAN,mBAAWA,GAAX,CAAoBL,OAGtBC,EAAa,KAuBN,iBAEL,6BACGC,EAAMa,KAAK,SAACC,EAAQR,GACnB,OACA,cAAC,EAAD,CAAsBZ,GAAIY,EAAOX,KAAMmB,EAASrB,SAAUS,GAA3CI,gBCjCRS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e683ea19.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ToDoLists = (props) => {\r\n   \r\n    return (\r\n        <>\r\n        <div className='todo_style'>\r\n        <i class=\"fa fa-times\"\r\n         aria-hidden=\"true\"\r\n          onClick={()=>{\r\n              {props.onSelect(props.id)}\r\n          }}\r\n          ></i>\r\n<li>{props.text}</li>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ToDoLists;","import React, { useState }  from 'react'\nimport './App.css';\nimport ToDoList from './ToDoLists'\n\n\nconst App = () => {\n\n  const [inputList, setInputList] = useState(\"\")\n  const [items, setItems] = useState([])\n  const itemEvent = (e) => {\n    setInputList(e.target.value)\n  }\n  const listOfItems = () => {\n  setItems((oldItems)=>{\n    return [...oldItems,inputList]\n    \n  })\n  setInputList(\"\")\n\n  }\n  const deleteItems = (id) => {\n    \n        setItems((oldItems)=>{\n          return oldItems.filter((arrElem,index)=>{\n            return index !== id;\n          })\n        })\n        \n\n    \n        }\n  return (\n  <>\n    <div className=\"main_div\">\n      <div className=\"center_div\">\n        <br />\n        <h1> ToDo List </h1>\n         <br />\n         < input type=\"text\" placeholder=\"Add Items\" onChange={itemEvent}\n         value={inputList}/> \n         <button onClick={listOfItems}> + </button>\n\n    <ol>\n      {items.map( (itemval,index)=>{\n        return(\n        <ToDoList key={index} id={index} text={itemval} onSelect={deleteItems} />\n        )\n      })}\n    </ol>\n    \n\n    \n    </div>\n    \n    </div>\n     </>\n  )\n\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}